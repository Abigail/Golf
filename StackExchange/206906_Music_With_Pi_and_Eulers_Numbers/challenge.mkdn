# [Music with &pi; and &#x03B5;(Eulers number)][codegolf]

Because I forgot to celebrate the &pi;-day(14.3) lets celebrate with
&pi;, &#x03B5; and music!

## Challenge

No, we don't have time to eat a &pi;-pizza, lets make a program.  What
you need is 500 digits of &pi;, and 10 digits of e.  The User gives
any digit from 0-499 through an input or a function.

Then you should loop through the digits of &pi; (number of digits are
based on the input from the user):

If your current &pi; digit is:

* 0 then the note is C
* 1 then the note is D
* 2 then the note is E
* 3 then the note is F
* 4 then the note is G
* 5 then the note is A
* 6 then the note is B
* 7 then the note is C'
* 8 then the note is D'
* 9 then the note is E'

Then, Based on your current &pi;-digit go to your e-digit: If the
&pi;-digit is 0, go to the 1 e-digit If the &pi;-digit is 1, go to the
2 e-digit...

You need only 10 digits of &#x03B5;, because your current
&pi; digit can only be a number between 0-9.

Return or print a tuple or list (if your language doesn't have tuples):
With the first element your note made from &pi;.
And the second element &#x03B5;-digit divided by 4 as beats.

## Test cases

    In:10
    Out:
    ('D', 0.25)
    ('G', 2.0)
    ('D', 0.25)
    ('A', 0.25)
    ("E'", 1.0)
    ('E', 2.0)
    ('B', 2.0)
    ('A', 0.25)
    ('F', 0.5)
    ('A', 0.25)
    In:5
    Out:
    ('D', 0.25)
    ('G', 2.0)
    ('D', 0.25)
    ('A', 0.25)
    ("E'", 1.0)

## Notes:

### &pi;

    3 -> Doesn't count
    . -> Doesn't count
    1 -> 0th digit
    4 -> 1th digit
    ...

### &#x03B5;

    2 -> Doesn't count
    . -> Doesn't count
    7 -> 0th digit
    1 -> 1th digit
    ...

## Solution

## How does this work?

    $n = $_;

This gets the input (which is in `$_` due to the `-p` switch; the
`-l` switch removes the newline).

    $p = new Math::BigFloat;
    $p -> accuracy (500);
    $_ = $p -> bpi;
    s/..//;

This gets us the 500 required digits from &pi;. First we create
a `Math::BigFloat` object, give it an accuracy of 500 (so, 500
decimals behind the comma). We then query the object to get &pi;,
which we store in `$_`. And we then remove the first two characters,
to set rid of the leading `3.`.

    s !.!
      '(' .    substr (CDEFGABCDE, $&, 1) . ("'" x ($& > 6)) .
      ', ' . ((substr  7182818284, $&, 1) / 4) .
      ")\n"
      !eg

This does the majority of the work. We take each digit of &pi;
and replace it with the result of the middle three lines of code
above. During the replacement, the digit being replaced is in `$&`.
We start with an opening paren, then we look up the note by using
the current digit as in index into a string (`substr (CDEFGABCDE,
$&, 1)`. If the digit is greater than 6, we need to add a prime
(`("'" x ($& > 6))`). We then add a comma. Then, to get the beat,
we index into the digits of &#x03B5;, and divide by four
(`((substr  7182818284, $&, 1) / 4)`). Finally, we add an closing
paren and a newline.

    /(.+\n){$n}/;
    $_ = $&

This trims the resulting string to the desired length. We're grabbing
`n` times a group of non-newline characters followed by a newline
character, and store the result into `$_`, which gets printed due
to the `-p` command line switch.

[codegolf]: https://codegolf.stackexchange.com/questions/206906/music-with-pi-and-eeulers-number
